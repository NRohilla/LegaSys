{"version":3,"sources":["webpack:///./src/app/layout/client/addclient/addclient-routing.module.ts","webpack:///./src/app/layout/client/addclient/addclient.component.html","webpack:///./src/app/layout/client/addclient/addclient.component.scss","webpack:///./src/app/layout/client/addclient/addclient.component.ts","webpack:///./src/app/layout/client/addclient/addclient.module.ts"],"names":[],"mappings":"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","file":"client-addclient-addclient-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AddclientComponent } from './addclient.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AddclientComponent\r\n  }\r\n\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AddclientRoutingModule { }\r\n","module.exports = \"<div>\\r\\n    <app-page-header [heading]=\\\"'Add New Client '\\\" [icon]=\\\"'fa fa-plus'\\\"></app-page-header>\\r\\n</div>\\r\\n<!-- <ngb-alert style=\\\"width:40%;\\\" *ngIf=\\\"Message\\\" type=\\\"success\\\" (close)=\\\"Message = null\\\">{{ successMessage }}</ngb-alert> -->\\r\\n<div class=\\\"card mb-3\\\">\\r\\n    <div class=\\\"card-header bg-info\\\">\\r\\n        <mat-label class=\\\"labeltext text-white\\\">Client Info </mat-label>\\r\\n    </div>\\r\\n    <form [formGroup]=\\\"clientForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n        <div class=\\\"w-100 table-active py-3 px-2 float-left\\\">\\r\\n            <div class=\\\"w-100 float-left\\\">\\r\\n                <!-- <form role=\\\"form\\\"> -->\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-12 float-left\\\">\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input matInput placeholder=\\\"Client Name\\\" formControlName=\\\"ClientName\\\" name=\\\"ClientName\\\" id=\\\"ClientName\\\">\\r\\n                        <mat-error *ngIf=\\\"clientForm.controls['ClientName'].invalid\\\">{{GetClientNameErrorMessage()}}</mat-error>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-12 float-left\\\">\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input matInput placeholder=\\\"Address\\\" formControlName=\\\"Address\\\" name=\\\"Address\\\" id=\\\"CoClient\\\">\\r\\n                        <mat-error *ngIf=\\\"clientForm.controls['Address'].invalid\\\">Client Address Can Not Be Empty</mat-error>\\r\\n                        <!-- <textarea matInput placeholder=\\\"Address\\\" formControlName=\\\"Address\\\" name=\\\"Address\\\" id=\\\"Address\\\"></textarea> -->\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-12 float-left\\\">\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input [readonly]=\\\"readOnly\\\" type=\\\"text\\\" matInput formControlName=\\\"Country\\\" [matAutocomplete]=\\\"auto\\\"\\r\\n                            placeholder=\\\"Country\\\">\\r\\n                        <mat-autocomplete autoActiveFirstOption #auto=\\\"matAutocomplete\\\" style=\\\"max-height: 200px !important\\\">\\r\\n                            <mat-option *ngFor=\\\"let option of filteredOptions | async\\\" [value]=\\\"option\\\" style=\\\"max-height: 200px !important\\\">\\r\\n                                {{option}}\\r\\n                            </mat-option>\\r\\n                        </mat-autocomplete>\\r\\n                        <mat-error *ngIf=\\\"clientForm.controls['Country'].invalid\\\">Country can not be Empty</mat-error>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n\\r\\n\\r\\n            </div>\\r\\n            <div class=\\\"w-100 float-left\\\">\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-12 float-left\\\">\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input matInput placeholder=\\\"Primary Email\\\" formControlName=\\\"EmailID\\\" name=\\\"EmailID\\\" id=\\\"EmailID\\\">\\r\\n                        <mat-error *ngIf=\\\"clientForm.controls['EmailID'].invalid\\\">{{GetEmailErrorMessage()}}</mat-error>\\r\\n\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-12 float-left\\\">\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input matInput placeholder=\\\"Secondary Email\\\" formControlName=\\\"EmailID2\\\" name=\\\"EmailID2\\\" id=\\\"EmailID2\\\">\\r\\n                        <mat-error *ngIf=\\\"clientForm.controls['EmailID2'].invalid\\\">Enter Valid Email ID</mat-error>\\r\\n\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-12 float-left\\\">\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input matInput placeholder=\\\"Other Email\\\" formControlName=\\\"EmailID3\\\" name=\\\"EmailID3\\\" id=\\\"EmailID3\\\">\\r\\n                        <mat-error *ngIf=\\\"clientForm.controls['EmailID3'].invalid\\\">Enter Valid Email ID</mat-error>\\r\\n\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n\\r\\n\\r\\n            </div>\\r\\n\\r\\n\\r\\n            <div class=\\\"w-100 float-left\\\">\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-12 float-left\\\">\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input matInput placeholder=\\\"Primary Co Client\\\" formControlName=\\\"CoClient\\\" name=\\\"CoClient\\\" id=\\\"CoClient\\\">\\r\\n                        <mat-error *ngIf=\\\"clientForm.controls['CoClient'].invalid\\\">{{GetPrimaryCoClientErrorMessage()}}</mat-error>\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-12 float-left\\\">\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input matInput placeholder=\\\"Secondary Co Client\\\" formControlName=\\\"CoClient2\\\" name=\\\"CoClient2\\\"\\r\\n                            id=\\\"CoClient2\\\">\\r\\n                        <mat-error *ngIf=\\\"clientForm.controls['CoClient2'].invalid\\\">Can only contain text</mat-error>\\r\\n\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <div class=\\\"col-lg-4 col-md-4 col-sm-4 col-12 float-left\\\">\\r\\n                    <mat-form-field class=\\\"w-100\\\">\\r\\n                        <input matInput placeholder=\\\"Other Co Client\\\" formControlName=\\\"CoClient3\\\" name=\\\"CoClient3\\\" id=\\\"CoClient3\\\">\\r\\n                        <mat-error *ngIf=\\\"clientForm.controls['CoClient3'].invalid\\\">Can only contain text</mat-error>\\r\\n\\r\\n                    </mat-form-field>\\r\\n                </div>\\r\\n                <!-- </form> -->\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"w-100 float-left table-info px-4 py-2 text-right footer-height\\\">\\r\\n            <div class=\\\"px-2 float-right\\\">\\r\\n                <button mat-button class=\\\"btn btn-info\\\" [routerLink]=\\\"['/client']\\\"><i class=\\\"fa fa-backward\\\"\\r\\n                        aria-hidden=\\\"true\\\"></i> Back</button>\\r\\n            </div>\\r\\n\\r\\n            <button class=\\\"btn btn-success\\\" [disabled]=\\\"!clientForm.valid\\\"><i class=\\\"fa fa-paper-plane\\\" aria-hidden=\\\"true\\\"></i>\\r\\n                Submit</button>\\r\\n\\r\\n        </div>\\r\\n    </form>\\r\\n</div>\"","module.exports = \".inputfield {\\n  width: 60%; }\\n\\n.labeltext {\\n  margin-left: 40%; }\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport {ClientServiceService} from '../client-service.service';\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\nimport { Router } from '@angular/router';\r\nimport {MatSnackBar} from '@angular/material';\r\nimport { Observable } from 'rxjs';\r\nimport { startWith, map } from 'rxjs/operators';\r\nimport { TosterService } from '../../../shared/services/toster.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-addclient',\r\n  templateUrl: './addclient.component.html',\r\n  styleUrls: ['./addclient.component.scss']\r\n})\r\nexport class AddclientComponent implements OnInit {\r\n  Message: boolean=false;\r\n  successMessage: string;\r\n\r\n  constructor(private formBuilder: FormBuilder,private clientservice: ClientServiceService, private router: Router,public tosterService:TosterService) { }\r\n\r\n  emailPattern = '^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$';// this regex will be used to validate email pattern\r\n  CountryList: string[] = [\"Afghanistan\",\"Albania\",\"Algeria\",\"Andorra\",\"Angola\",\"Anguilla\",\"Antigua &amp; Barbuda\",\"Argentina\",\"Armenia\",\"Aruba\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahamas\",\"Bahrain\",\"Bangladesh\",\"Barbados\",\"Belarus\",\"Belgium\",\"Belize\",\"Benin\",\"Bermuda\",\"Bhutan\",\"Bolivia\",\"Bosnia &amp; Herzegovina\",\"Botswana\",\"Brazil\",\"British Virgin Islands\",\"Brunei\",\"Bulgaria\",\"Burkina Faso\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Cape Verde\",\"Cayman Islands\",\"Chad\",\"Chile\",\"China\",\"Colombia\",\"Congo\",\"Cook Islands\",\"Costa Rica\",\"Cote D Ivoire\",\"Croatia\",\"Cruise Ship\",\"Cuba\",\"Cyprus\",\"Czech Republic\",\"Denmark\",\"Djibouti\",\"Dominica\",\"Dominican Republic\",\"Ecuador\",\"Egypt\",\"El Salvador\",\"Equatorial Guinea\",\"Estonia\",\"Ethiopia\",\"Falkland Islands\",\"Faroe Islands\",\"Fiji\",\"Finland\",\"France\",\"French Polynesia\",\"French West Indies\",\"Gabon\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\",\"Gibraltar\",\"Greece\",\"Greenland\",\"Grenada\",\"Guam\",\"Guatemala\",\"Guernsey\",\"Guinea\",\"Guinea Bissau\",\"Guyana\",\"Haiti\",\"Honduras\",\"Hong Kong\",\"Hungary\",\"Iceland\",\"India\",\"Indonesia\",\"Iran\",\"Iraq\",\"Ireland\",\"Isle of Man\",\"Israel\",\"Italy\",\"Jamaica\",\"Japan\",\"Jersey\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\"Kuwait\",\"Kyrgyz Republic\",\"Laos\",\"Latvia\",\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libya\",\"Liechtenstein\",\"Lithuania\",\"Luxembourg\",\"Macau\",\"Macedonia\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\"Malta\",\"Mauritania\",\"Mauritius\",\"Mexico\",\"Moldova\",\"Monaco\",\"Mongolia\",\"Montenegro\",\"Montserrat\",\"Morocco\",\"Mozambique\",\"Namibia\",\"Nepal\",\"Netherlands\",\"Netherlands Antilles\",\"New Caledonia\",\"New Zealand\",\"Nicaragua\",\"Niger\",\"Nigeria\",\"Norway\",\"Oman\",\"Pakistan\",\"Palestine\",\"Panama\",\"Papua New Guinea\",\"Paraguay\",\"Peru\",\"Philippines\",\"Poland\",\"Portugal\",\"Puerto Rico\",\"Qatar\",\"Reunion\",\"Romania\",\"Russia\",\"Rwanda\",\"Saint Pierre &amp; Miquelon\",\"Samoa\",\"San Marino\",\"Satellite\",\"Saudi Arabia\",\"Senegal\",\"Serbia\",\"Seychelles\",\"Sierra Leone\",\"Singapore\",\"Slovakia\",\"Slovenia\",\"South Africa\",\"South Korea\",\"Spain\",\"Sri Lanka\",\"St Kitts &amp; Nevis\",\"St Lucia\",\"St Vincent\",\"St. Lucia\",\"Sudan\",\"Suriname\",\"Swaziland\",\"Sweden\",\"Switzerland\",\"Syria\",\"Taiwan\",\"Tajikistan\",\"Tanzania\",\"Thailand\",\"Timor L'Este\",\"Togo\",\"Tonga\",\"Trinidad &amp; Tobago\",\"Tunisia\",\"Turkey\",\"Turkmenistan\",\"Turks &amp; Caicos\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"United Kingdom\",\"United States of America\",\"Uruguay\",\"Uzbekistan\",\"Venezuela\",\"Vietnam\",\"Yemen\",\"Zambia\",\"Zimbabwe\"];\r\n  filteredOptions: Observable<string[]>;// this variable will hold the returned list of autocomplete\r\n\r\n\r\n   clientForm: FormGroup;\r\n\r\n   GetEmailErrorMessage(){\r\n    if(this.clientForm.controls['EmailID'].errors.required){\r\n      return \"Primary Email can not be empty\";\r\n    }\r\n    if(this.clientForm.controls['EmailID'].errors.pattern){\r\n      return \"Please enter valid Email\";\r\n    }\r\n  }\r\n\r\n  GetClientNameErrorMessage(){\r\n    if(this.clientForm.controls['ClientName'].errors.required){\r\n      return \"Client name can not be empty\";\r\n    }\r\n    if(this.clientForm.controls['ClientName'].errors.pattern){\r\n      return \"Client name can only contails text\";\r\n    }\r\n  }\r\n\r\n  GetPrimaryCoClientErrorMessage(){\r\n    if(this.clientForm.controls['CoClient'].errors.required){\r\n      return \"Primary CoClient name can not be empty\";\r\n    }\r\n    if(this.clientForm.controls['CoClient'].errors.pattern){\r\n      return \"can only contails text\";\r\n    }\r\n  }\r\n   ngOnInit() \r\n   {\r\n   \r\n     this.clientForm = this.formBuilder.group({\r\n      \r\n       ClientName: ['',[Validators.required, Validators.pattern('^[a-zA-Z ]+$')]],\r\n       Country: ['',Validators.required],\r\n       Address: ['',Validators.required],\r\n       CoClient: ['',[Validators.required, Validators.pattern('^[a-zA-Z ]+$')]],\r\n       CoClient2: ['', Validators.pattern('^[a-zA-Z ]+$')],\r\n       CoClient3: ['', Validators.pattern('^[a-zA-Z ]+$')],\r\n       EmailID: ['', [Validators.required, Validators.pattern(this.emailPattern)]],\r\n       EmailID2: ['', Validators.pattern(this.emailPattern)],\r\n       EmailID3: ['', Validators.pattern(this.emailPattern)]\r\n\r\n     });\r\n     this.filteredOptions = this.clientForm.controls['Country'].valueChanges.pipe(\r\n      startWith(''),\r\n      map(value => this._filter(value))\r\n    );\r\n     \r\n   \r\n    }\r\n    private _filter(value: string): string[] {\r\n      const filterValue = value.toLowerCase();\r\n      return this.CountryList.filter(option => option.toLowerCase().indexOf(filterValue) === 0);\r\n    }\r\n    show() {\r\n      this.Message = true;\r\n      this.successMessage = \"Client Added Succesfully\";\r\n      setTimeout(() => this.Message = false, 1500)\r\n    }\r\n    onSubmit() \r\n  {\r\n  \r\n      this.clientservice.AddClientDetails(this.clientForm.value)\r\n      .subscribe(        \r\n        suc=>{\r\n                if(suc>0)\r\n                {\r\n               //   this.show();\r\n                this.tosterService.showSuccess(\"Client Added Successfully\");\r\n                }\r\n                else{\r\n                  alert(\"Client could not been Added \");\r\n                }\r\n        },\r\n        err=>{\r\n              alert(\"Client could not been Added \");\r\n        }\r\n       \r\n        );\r\n  }\r\n\r\n  \r\n \r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AddclientRoutingModule } from './addclient-routing.module';\r\nimport { AddclientComponent } from './addclient.component';\r\nimport { PageHeaderModule } from './../../../shared';\r\nimport { MatFormFieldModule,MatInputModule} from '@angular/material';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport {ClientServiceService} from '../client-service.service';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    AddclientRoutingModule,\r\n    PageHeaderModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatSnackBarModule,\r\n    MatAutocompleteModule,\r\n    NgbModule.forRoot()\r\n  ],\r\n  providers: [ClientServiceService],\r\n    declarations: [AddclientComponent]\r\n})\r\nexport class AddclientModule { }\r\n"],"sourceRoot":""}